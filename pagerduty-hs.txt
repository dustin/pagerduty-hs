-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | An interface to the PagerDuty API.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/dustin/pagerduty-hs#readme</a>
@package pagerduty-hs
@version 0.3.0.0


-- | PagerDuty Event V1 interface.
module Network.API.PagerDuty.EventV1

-- | Request object to create an event. Any value that may be serialized to
--   JSON maybe attached as details.
--   
--   This may be delivered with the <a>deliver</a> function.
data TriggerEvent a
TriggerEvent :: Text -> Maybe Text -> Text -> Maybe a -> Text -> Text -> [Context] -> TriggerEvent a
[_teServiceKey] :: TriggerEvent a -> Text
[_teIncidentKey] :: TriggerEvent a -> Maybe Text
[_teDescription] :: TriggerEvent a -> Text
[_teDetails] :: TriggerEvent a -> Maybe a
[_teClient] :: TriggerEvent a -> Text
[_teClientURL] :: TriggerEvent a -> Text
[_teContexts] :: TriggerEvent a -> [Context]

-- | A <a>TriggerEvent</a> type that doesn't have details.
type TriggerEvent' = TriggerEvent ()

-- | Context that may be added when creating an event.
data Context

-- | Link to a URL with an optional link description.
Link :: Text -> Maybe Text -> Context

-- | Image URL, optional link ref, and optional alt text.
Image :: Text -> Maybe Text -> Maybe Text -> Context

-- | UpdateEvent is the message for both acknowledging and resolving
--   incidents. This may be delivered using the <a>deliver</a> function.
data UpdateEvent a
UpdateEvent :: UpdateType -> Text -> Text -> Text -> Maybe a -> UpdateEvent a
[_updateType] :: UpdateEvent a -> UpdateType
[_updateServiceKey] :: UpdateEvent a -> Text
[_updateIncidentKey] :: UpdateEvent a -> Text
[_updateDescription] :: UpdateEvent a -> Text
[_updateDetails] :: UpdateEvent a -> Maybe a

-- | A <a>UpdateEvent</a> type that doesn't have details.
type UpdateEvent' = UpdateEvent ()

-- | An event update will either acknowledge or resolve an incident.
data UpdateType
Acknowledge :: UpdateType
Resolve :: UpdateType

-- | Deliver a <a>TriggerEvent</a> or <a>UpdateEvent</a>.
deliver :: (EventRequest r, MonadCatch m, MonadIO m) => r -> m Response

-- | Response to a delivered message.
data Response

-- | Failure status and message
Failure :: Text -> Text -> Response

-- | Success and incident key for further updates
Success :: Text -> Response
instance GHC.Classes.Eq Network.API.PagerDuty.EventV1.Context
instance GHC.Show.Show Network.API.PagerDuty.EventV1.Context
instance GHC.Classes.Eq a => GHC.Classes.Eq (Network.API.PagerDuty.EventV1.TriggerEvent a)
instance GHC.Show.Show a => GHC.Show.Show (Network.API.PagerDuty.EventV1.TriggerEvent a)
instance GHC.Enum.Enum Network.API.PagerDuty.EventV1.UpdateType
instance GHC.Enum.Bounded Network.API.PagerDuty.EventV1.UpdateType
instance GHC.Classes.Eq Network.API.PagerDuty.EventV1.UpdateType
instance GHC.Show.Show Network.API.PagerDuty.EventV1.UpdateType
instance GHC.Classes.Eq a => GHC.Classes.Eq (Network.API.PagerDuty.EventV1.UpdateEvent a)
instance GHC.Show.Show a => GHC.Show.Show (Network.API.PagerDuty.EventV1.UpdateEvent a)
instance GHC.Classes.Eq Network.API.PagerDuty.EventV1.Response
instance GHC.Show.Show Network.API.PagerDuty.EventV1.Response
instance Data.Aeson.Types.FromJSON.FromJSON Network.API.PagerDuty.EventV1.Response
instance Data.Aeson.Types.ToJSON.ToJSON a => Network.API.PagerDuty.EventV1.EventRequest (Network.API.PagerDuty.EventV1.UpdateEvent a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Network.API.PagerDuty.EventV1.UpdateEvent a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Network.API.PagerDuty.EventV1.EventRequest (Network.API.PagerDuty.EventV1.TriggerEvent a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Network.API.PagerDuty.EventV1.TriggerEvent a)
instance Data.Aeson.Types.ToJSON.ToJSON Network.API.PagerDuty.EventV1.Context


-- | Lenses and prisms for the PagerDuty Event V1 interface.
module Network.API.PagerDuty.EventV1Lenses
_Link :: Prism' Context (Text, Maybe Text)
_Image :: Prism' Context (Text, Maybe Text, Maybe Text)
teServiceKey :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) Text
teIncidentKey :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) (Maybe Text)
teDescription :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) Text
teDetails :: forall a_iiKf a_aiKh. Lens (TriggerEvent a_iiKf) (TriggerEvent a_aiKh) (Maybe a_iiKf) (Maybe a_aiKh)
teClient :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) Text
teClientURL :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) Text
teContexts :: forall a_iiKf. Lens' (TriggerEvent a_iiKf) [Context]
_Acknowledge :: Prism' UpdateType ()
_Resolve :: Prism' UpdateType ()
updateType :: forall a_iiRO. Lens' (UpdateEvent a_iiRO) UpdateType
updateServiceKey :: forall a_iiRO. Lens' (UpdateEvent a_iiRO) Text
updateIncidentKey :: forall a_iiRO. Lens' (UpdateEvent a_iiRO) Text
updateDescription :: forall a_iiRO. Lens' (UpdateEvent a_iiRO) Text
updateDetails :: forall a_iiRO a_aiRQ. Lens (UpdateEvent a_iiRO) (UpdateEvent a_aiRQ) (Maybe a_iiRO) (Maybe a_aiRQ)
